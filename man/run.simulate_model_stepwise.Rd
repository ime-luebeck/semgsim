% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.r
\name{run.simulate_model_stepwise}
\alias{run.simulate_model_stepwise}
\title{Run stepwise simulation}
\usage{
run.simulate_model_stepwise(instance, muscle_force = NULL, time_limits = NULL)
}
\arguments{
\item{instance}{Produced by \code{run.simulate_model_stepwise()}.}

\item{muscle_force}{Either a list of muscle force functions
(one function per muscle) or a matrix with dimension
[time x muscles] or a vector (only one muscle).}

\item{time_limits}{Optional. Two-elements vector limiting the
time axis. If \code{NULL} then \code{muscle_force} is assumed to be a
matrix or data frame which determines the time axis.}
}
\description{
It is based on already existing \code{instance} for stepwise
simulation generated by \code{\link[=init.simulate_model_stepwise]{init.simulate_model_stepwise()}}.
The function may not be useful per se because stepwise
simulation usually avoids being called as in chunk based processing.
However, it allows direct comparison to the conventional method
\code{\link[=simulate_model]{simulate_model()}}.
}
\details{
This simulation is equivalent to \code{simulate_model()} above.
Motor unit (MU) impulse trains and contribs are not saved.
The examples below show how a simulation \code{instance} is created
and simulation is run.
}
\examples{
# This may take long because transfer functions have to be calculated:
model <- calculate_semg_TFs(setup_muscles("config/integration.r", deterministic = TRUE), deterministic = TRUE) 
saveRDS(model, file="integration.rds")

# Now run the simulation conventionally:
model <- simulate_model(model, model$force_functions, model$time_limits, num_cores=1, parallel="chunk", deterministic=TRUE)

# Re-run stepwise simulation (as a chunk, though):
instance <- init.simulate_model_stepwise(model, deterministic=TRUE)
model <- run.simulate_model_stepwise(instance, model$force_functions, model$time_limits)
        
# Thus, the available semgsim plot routines can be used for displaying the results 
# (except MU specific plots because MU specific results were not saved):
plot_surface_potentials(model$surface_potentials, electrodes=c(1,2,3,4), electrode_confs = list(c(1, -1, 0, 0), c(0, 0, 1, -1)))
plot_muscle_contribs(model$muscle_contribs)
        
# Performance tests:
system.time(simulate_model(model, model$force_functions, model$time_limits, num_cores=1, parallel="sample", deterministic=TRUE))
system.time(run.simulate_model_stepwise(instance, model$force_functions, model$time_limits))
}
