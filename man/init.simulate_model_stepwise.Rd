% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.r
\name{init.simulate_model_stepwise}
\alias{init.simulate_model_stepwise}
\title{Initialize stepwise simulation}
\usage{
init.simulate_model_stepwise(model, deterministic = FALSE, out_file = NULL)
}
\arguments{
\item{model}{Produced by \code{calculate_semg_TFs()}.}

\item{deterministic}{Option sets seed for reproducible random
numbers. Note that the the results are not identical if
\code{instance$run()} is called repeatedly (samplewise) or once
providing a chunk. The reason is that the sequence of calling
the random number generator is different}

\item{out_file}{Optional. If given, specifies a file to save
the simulation \code{environment()}. Results can be loaded via
\code{readRDS(out_file)} afterwards.}
}
\description{
It is based on already existing setup and transfer functions
available via parameter \code{model}.
}
\details{
This simulation is equivalent to \code{simulate_model()} above except
that execution is performed stepwise (sample by sample) and motor
unit (MU) impulse trains and contribs are not saved. The examples
below show how a simulation \code{instance} is created and simulation is
run.
}
\examples{
# This may take long because transfer functions have to be calculated, initially:
model <- calculate_semg_TFs(setup_muscles("config/integration.r", deterministic = TRUE), deterministic = TRUE) 
saveRDS(model, file="integration.rds")

# Run simulation stepwise by repeatedly calling instance$run():
instance <- init.simulate_model_stepwise(model, deterministic=TRUE)
res <- apply(as.data.frame(model$load_vals$force), 1, instance$run)

# As an alternative return also the force and w/o summing (using sapply just for fun):
res <- sapply(as.data.frame(t(as.data.frame(model$load_vals$force))),
              function(x) {
                instance$run(x)
                return(c(emg=unlist(instance$getEmg()),force=instance$getForce()))   # note: emg and force are NOT summed across muscles
              })
        
# Run simulation on input array of force data by calling instance$run() once:
force_vals = as.data.frame(model$load_vals$force)[1:20,]
instance <- init.simulate_model_stepwise(model, deterministic=TRUE)
instance$run(force_vals)

# Performance tests:
microbenchmark::microbenchmark(instance$run(rnorm(2)))
}
